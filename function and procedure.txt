1) Create student grade calculator as function and procedure both?

PROCEDURE:

create or replace procedure gradeCal(marks IN integer)
is
 grade varchar2(30);
BEGIN
   if marks>=80 and marks<=100 then
   grade:='A';
   
   elsif marks>=60 and marks<=79 then
   grade:='B';

   elsif marks>=40 and marks<=59 then
   grade:='C';
   
   elsif marks>100 then
   grade:='please provide valid marks and marks should be in between 100';
   else
   grade:='failure';
   
 end if;
 dbms_output.put_line(grade);
end gradeCal
  

FUNCTION CALL:

begin 
 gradeCal(86);
end;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

FUNCTION:

CREATE or REPLACE FUNCTION gradeCalculator(marks IN integer)
return varchar2

is
 grade varchar2(100);
 
BEGIN
   if marks>=80 and marks<=100 then
   grade:='A';
   
   elsif marks>=60 and marks<=79 then
   grade:='B';
   elsif marks>=40 and marks<=59 then
   grade:='C';
   elsif marks>100 then
   grade:='please provide valid marks and marks should be in between 100';
   else
   grade:='failure';
 return grade;
end gradeCalculator;

FUNCTION CALL:

begin 
dbms_output.put_line(gradeCalculator(30));
end;

_____________________________________________________

2)create procedure for fetching maximum salary employee in department 100.


CREATE or REPLACE PROCEDURE maxSalary(dept_id IN integer)
is
 emaxSalary employees.salary%TYPE;
 begin
 select max(salary) into emaxSalary from employees where department_id=dept_id;
 
 dbms_output.put_line(emaxSalary);
end; 

begin
maxSalary(100);
end;
___________________________________________________________________________________________
13/09/22

1) Write a procedure for calculating bonus of employee no 205.

create  or replace procedure bonusCal(emp_id IN integer)
is
bonus employees.salary%TYPE;
begin 
select (salary+nvl(commission_pct,0))into bonus from employees where employee_id=emp_id;

dbms_output.put_line(bonus);
end bonusCal;

begin
bonusCal(205);
end;


2. Write a procedure for giving bonus to employees based on below rules - if job_id is IT PROG 
then salary will be increase by 1000 and if job_id is SA_REP then salary will be increase by 700.

create or replace procedure empB(ejob_id IN varchar2)
is
erecord emp%ROWTYPE;
cursor emp_curr is
select * from emp where job_id=ejob_id;
 
 begin 
 open emp_curr;
 loop
 
 fetch emp_curr into erecord;
 exit when emp_curr%notfound;
 if (erecord.job_id like 'IT_PROG') THEN
   
    dbms_output.put_line ('employee:'|| erecord.employee_id );
    dbms_output.put_line ('name:'|| erecord.first_name );
    dbms_output.put_line('bonus'||(erecord.salary+1000));
    dbms_output.put_line (' --------------------------');
   
elsif erecord.job_id like 'SA_REP' then 
   
   dbms_output.put_line ('employee_id:'|| erecord.employee_id );
   dbms_output.put_line ('name:'|| erecord.first_name );
   dbms_output.put_line('bonus:'||(erecord.salary+700));
   dbms_output.put_line ( '----------------------------'    );
    
else 

  dbms_output.put_line ('employee_id'|| erecord.employee_id );
  dbms_output.put_line('salary'||erecord.salary);
  dbms_output.put_line ('name:'|| erecord.first_name );
  dbms_output.put_line ( '----------------------- ');
  
 end if;
 end loop;
 
 close emp_curr;
 end;
 

begin
empB('SA_REP');
end;


_____________________________________________________________________________________________________________________________________________
15/09/22

1)write a procedure to fetch all record of JOB_ID manader with their sibordinates?

create or replace procedure managemp(ejob_id IN varchar2)
is
erecord emp%ROWTYPE;
--begin
cursor emp_curr is
 select * from emp where job_id=ejob_id;
 
 begin 
 open emp_curr;
 loop
 fetch emp_curr into erecord;
 exit when emp_curr%notfound;
 dbms_output.put_line('manager_id:'||erecord.manager_id );
  dbms_output.put_line ('first_name:'|| erecord.first_name );
  dbms_output.put_line('employee_id:'|| erecord.employee_id);
   dbms_output.put_line('------------------------');
 end loop;

 close emp_curr;
 end;



begin
managemp('SA_REP');
end;







 
 
